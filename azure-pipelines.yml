name: ${{ parameters.Action }} - ${{ parameters.env }}.${{ parameters.location }} 

trigger: none

parameters:

  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
    - Plan
    - Apply
    - Destroy

  - name: location
    displayName: Location
    type: string
    default: 'UK South'
    values:
    - 'UK South'
    - 'UK West'

  - name: env
    displayName: Environment
    type: string
    default: 'PTLSBOX'
    values:
    - PTLSBOX

variables:
  - name: tfversion
    value: 0.15.4
  - name: project
    value: ss
  - name: serviceConnection
    value: OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS
  - name: tfInitSub
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: product
    value: 'sds-jenkins'
  - name: action
    value: ${{ parameters.Action }}
  - name: builtFrom
    value: $(Build.Repository.Name)

stages:
  - stage: 
    displayName: 'Jenkins Infrastructure'
    jobs:
      - job: 'Jenkins Infrastructure'
        steps:
          - task: Terraform Installer@0
            displayName: 'Install Terraform ${{ variables.tfversion }}'
            inputs:
              terraformVersion: ${{ variables.tfversion }}
          - task: TerraformCLI@0
            displayName: terraform init
            inputs:
              command: init
              terraformVersion: ${{ variables.tfversion }}
              workingDirectory: '$(System.DefaultworkingDirectory)/components/'
              backendType: azurerm
              backendServiceArm: $(serviceConnection)
              backendAzureRmResourceGroupName: 'azure-control-$(env)-rg'
              backendAzureRmResourceGroupLocation: ${{ parameters.location }}
              backendAzureRmStorageAccountName: $(controlStorageAccount)
              backendAzureRmStorageAccountSku: Standard_LRS
              backendAzureRmContainerName: subscription-tfstate
              backendAzureRmKey: '${{ parameters.location }}/${{ variables.project }}/$(env)/jenkins/terraform-jenkins.tfstate'
              commandOptions: '-backend-config=subscription_id=${{ variables.tfinitSub }} -var builtFrom=${{ variables.builtFrom }} -var product=${{ variables.product }}'

          - task: TerraformCLI@0
            displayName: Terraform validate
            inputs:
              command: validate
              terraformVersion: ${{ variables.tfversion }}
              workingDirectory: $(System.DefaultworkingDirectory)/components/

          - task: TerraformCLI@0
            displayName: Terraform plan
            inputs:
              command: plan
              terraformVersion: ${{ variables.tfversion }}
              workingDirectory: $(System.DefaultworkingDirectory)/components/
              environmentServiceName: $(serviceConnection)
              commandOptions: '-out=tfplan-${{ variables.project }}-$(env) -var control_vault=$(controlKeyVault) -var environment=$(env) -var project=$(project) -var builtFrom=${{ variables.builtFrom }} -var product=${{ variables.product }}'

          - task: TerraformCLI@0
            displayName: Terraform apply
            condition: and(succeeded(), eq(variables['Action'], 'Apply'))
            inputs:
              command: apply
              terraformVersion: ${{ variables.tfversion }}
              workingDirectory: $(System.DefaultworkingDirectory)/components/
              environmentServiceName: $(serviceConnection)
              commandOptions: '--auto-approve tfplan-${{ variables.project }}-$(env)'

          - task: TerraformCLI@0
            displayName: Terraform output
            inputs:
              command: output
              terraformVersion: ${{ variables.tfversion }}
              workingDirectory: $(System.DefaultworkingDirectory)/components/
              environmentServiceName: $(serviceConnection)
          